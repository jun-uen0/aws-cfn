# Ref: https://dev.classmethod.jp/articles/cfn-https-template1/

AWSTemplateFormatVersion: '2010-09-09'
Description: Create new ALB, ACM, SG, https
Parameters:
  ServerName:
    Description: Server Name
    Type: String
    Default: 'test'
  VPCID:
    Description: VPC
    Type: String
  PrimarySubnet:
    Description: PrimarySubnet ID
    Type: String
    Default: 'subnet-xxx'
  SecondarySubnet:
    Description: SecondarySubnet ID
    Type: String
    Default: 'subnet-xxxx'
  HostZoneId:
    Description: FQDN of the hosted zone
    Type: String
    Default: 'Z0xxx'
  DomainName:
    Description: FQDN of the HostZone
    Type: String
    Default: 'example.com'
  SubDomain:
    Description: FQDN of the certificate
    Type: String
    Default: 'test.example.com'
Resources:
  SGloadbalancer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${ServerName}-alb-sg
      GroupDescription: !Sub ${ServerName}-alb-sg
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIpv6: ::/0
          FromPort: 443 
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${ServerName}-alb-sg
  TargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VPCID
      Name: !Sub ${ServerName}-tg
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher: 
        HttpCode: 200
      Targets: 
        - Id: !Ref EC2Web1
          Port: 80
  InternetALB: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Name: !Sub ${ServerName}-alb
      Scheme: "internet-facing"
      LoadBalancerAttributes: 
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 4000
      SecurityGroups:
        - !Ref SGloadbalancer
      Subnets: 
        - !Ref PrimarySubnet
        - !Ref SecondarySubnet
  ALBListenerHTTP: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - Type: redirect
          RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref InternetALB
  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACM
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref InternetALB
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub '${HostZoneId}'
      Comment: "DNS for ALB"
      Name: !Sub '${SubDomain}'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'InternetALB.CanonicalHostedZoneID'
        DNSName: !GetAtt 'InternetALB.DNSName'
  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${SubDomain}'
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}'
          HostedZoneId: !Sub '${HostZoneId}'
      ValidationMethod: DNS